var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');

var Mmu = xdc.useModule('ti.sysbios.family.arm.a8.Mmu');
var Platform = xdc.useModule('ti.platforms.beaglebone.Platform');
var Event = xdc.useModule('ti.sysbios.knl.Event');
var Idle = xdc.useModule('ti.sysbios.knl.Idle');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');
var Task = xdc.useModule('ti.sysbios.knl.Task');
Mmu.enableMMU = true;

/* Force peripheral section to be NON cacheable strongly-ordered memory */
var peripheralAttrs = {
    type : Mmu.FirstLevelDesc_SECTION, // SECTION descriptor
    tex: 0,
    bufferable : false,                // bufferable
    cacheable  : false,                // cacheable
    shareable  : false,                // shareable
    noexecute  : true,                 // not executable
};

/* Configure the MMU to allow access to:*/
/* GPIO1, UART1, UART2, I2C1, McSPI0, McASP0 CFG, McASP1 CFG */
var CMperipheralBaseAddr = 0x44E00000;
Mmu.setFirstLevelDescMeta(CMperipheralBaseAddr,
                          CMperipheralBaseAddr,
                          peripheralAttrs);

/* GPIO2, GPIO3, UART3, UART4, UART5, I2C2, McSPI1 */
var GPIO3peripheralBaseAddr = 0x48100000; 
Mmu.setFirstLevelDescMeta(GPIO3peripheralBaseAddr,
                          GPIO3peripheralBaseAddr,
                          peripheralAttrs);
                          
/* GPIO2, GPIO3, UART3, UART4, UART5, I2C2, McSPI1 */
var UART0peripheralBaseAddr = 0x48000000; 
Mmu.setFirstLevelDescMeta(UART0peripheralBaseAddr,
                          UART0peripheralBaseAddr,
                          peripheralAttrs);
/* PWM0, 1,2,3 */
var PWM0peripheralBaseAddr = 0x48300000; 
Mmu.setFirstLevelDescMeta(PWM0peripheralBaseAddr,
                          PWM0peripheralBaseAddr,
                          peripheralAttrs);
/* Timers2 - 7 */
var TIMERSperipheralBaseAddr = 0x48040000; 
Mmu.setFirstLevelDescMeta(TIMERSperipheralBaseAddr,
                          TIMERSperipheralBaseAddr,
                          peripheralAttrs);
/* Configure the MMU to allow access to:*/
/*  */
var I2CperipheralBaseAddr = 0x44E08000;
Mmu.setFirstLevelDescMeta(I2CperipheralBaseAddr,
                          I2CperipheralBaseAddr,
                          peripheralAttrs);
                          
/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x1000;

/*
 * Build a custom SYS/BIOS library from sources.
 */
BIOS.libType = BIOS.LibType_Custom;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x2000;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x200;

/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 16;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;
var hwi1Params = new Hwi.Params();
hwi1Params.instance.name = "isr97gpio0hn";
Program.global.isr97gpio0hn = Hwi.create(97, "&isr97gpio0", hwi1Params);
var hwi5Params = new Hwi.Params();
hwi5Params.instance.name = "isr33gpio2hn";
Program.global.isr33gpio2hn = Hwi.create(33, "&isr33gpio2", hwi5Params);
var hwi7Params = new Hwi.Params();
hwi7Params.instance.name = "isr7NMIhn";
hwi7Params.enableInt = false;
Program.global.isr7NMIhn = Hwi.create(7, "&isr7NMI", hwi7Params);
var semaphore4Params = new Semaphore.Params();
semaphore4Params.instance.name = "semaPIMRunState";
semaphore4Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.semaPIMRunState = Semaphore.create(null, semaphore4Params);
Idle.idleFxns[0] = "&PIMMainIdle";
var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "semaUART1";
semaphore1Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.semaUART1 = Semaphore.create(null, semaphore1Params);
BIOS.rtsGateType = BIOS.NoLocking;
var hwi9Params = new Hwi.Params();
hwi9Params.instance.name = "timer3";
hwi9Params.enableInt = false;
hwi9Params.priority = -1;
Program.global.timer3 = Hwi.create(69, "&isrTimer3", hwi9Params);
var hwi10Params = new Hwi.Params();
hwi10Params.instance.name = "timer4";
hwi10Params.priority = -1;
hwi10Params.arg = 0;
hwi10Params.enableInt = false;
Program.global.timer4 = Hwi.create(92, "&isrTimer4", hwi10Params);
var hwi11Params = new Hwi.Params();
hwi11Params.instance.name = "timer6";
hwi11Params.priority = -1;
hwi11Params.enableInt = false;
Program.global.timer6 = Hwi.create(94, "&isrTimer6", hwi11Params);
var hwi12Params = new Hwi.Params();
hwi12Params.instance.name = "timer7";
hwi12Params.enableInt = false;
Program.global.timer7 = Hwi.create(95, "&isrTimer7", hwi12Params);
var task0Params = new Task.Params();
task0Params.instance.name = "taskPIMRun";
task0Params.vitalTaskFlag = false;
Program.global.taskPIMRun = Task.create("&taskfnPIMRun", task0Params);
var hwi13Params = new Hwi.Params();
hwi13Params.instance.name = "rtcint";
Program.global.rtcint = Hwi.create(75, "&isrfnRTCInt", hwi13Params);
var hwi14Params = new Hwi.Params();
hwi14Params.instance.name = "isr79eQEP0INThn";
Program.global.isr79eQEP0INThn = Hwi.create(79, "&isr79eQEP0INT", hwi14Params);
var hwi15Params = new Hwi.Params();
hwi15Params.instance.name = "isr88eQEP1INThn";
Program.global.isr88eQEP1INThn = Hwi.create(88, "&isr88eQEP1INT", hwi15Params);
var hwi16Params = new Hwi.Params();
hwi16Params.instance.name = "isr89eQEP2INThn";
Program.global.isr89eQEP2INThn = Hwi.create(89, "&isr89eQEP2INT", hwi16Params);
var hwi16Params0 = new Hwi.Params();
hwi16Params0.instance.name = "isr96gpio0hn";
Program.global.isr96gpio0hn = Hwi.create(96, "&isr96gpio0", hwi16Params0);
var hwi16Params1 = new Hwi.Params();
hwi16Params1.instance.name = "isr98gpio1hn";
Program.global.isr98gpio1hn = Hwi.create(98, "&isr98gpio1", hwi16Params1);
var hwi16Params2 = new Hwi.Params();
hwi16Params2.instance.name = "isr70I2C0hn";
Program.global.isr70I2C0hn = Hwi.create(70, "&isr70I2C0", hwi16Params2);
var hwi16Params4 = new Hwi.Params();
hwi16Params4.instance.name = "isr57gpiohn";
Program.global.isr57gpiohn = Hwi.create(57, "&isr57gpio", hwi16Params4);
var hwi16Params5 = new Hwi.Params();
hwi16Params5.instance.name = "isr99gpio1hn";
Program.global.isr99gpio1hn = Hwi.create(99, "&isr99gpio1", hwi16Params5);
var hwi17Params = new Hwi.Params();
hwi17Params.instance.name = "isr71I2C1hn";
Program.global.isr71I2C1hn = Hwi.create(71, "&isr71I2C1", hwi17Params);
var hwi18Params = new Hwi.Params();
hwi18Params.instance.name = "isr30I2C2hn";
Program.global.isr30I2C2hn = Hwi.create(30, "&isr30I2C2", hwi18Params);
var hwi19Params = new Hwi.Params();
hwi19Params.instance.name = "isr17USBSSINThn";
Program.global.isr17USBSSINThn = Hwi.create(17, "&isr17USBSSINT", hwi19Params);
var hwi20Params = new Hwi.Params();
hwi20Params.instance.name = "isr18USBINT0hn";
Program.global.isr18USBINT0hn = Hwi.create(18, "&isr18USBINT0", hwi20Params);
var hwi21Params = new Hwi.Params();
hwi21Params.instance.name = "isr19USBINT1hn";
Program.global.isr19USBINT1hn = Hwi.create(19, "&isr19USBINT1", hwi21Params);
var hwi22Params = new Hwi.Params();
hwi22Params.instance.name = "isr72UART0INTThn";
Program.global.isr72UART0INTThn = Hwi.create(72, "&isr72UART0INT", hwi22Params);
var hwi23Params = new Hwi.Params();
hwi23Params.instance.name = "isr73UART1INThn";
Program.global.isr73UART1INThn = Hwi.create(73, "&isr73UART1INT", hwi23Params);
var hwi24Params = new Hwi.Params();
hwi24Params.instance.name = "isr74UART2INThn";
Program.global.isr74UART2INThn = Hwi.create(74, "&isr74UART2INT", hwi24Params);
var hwi24Params0 = new Hwi.Params();
hwi24Params0.instance.name = "isr44UART3INThn";
Program.global.isr44UART3INThn = Hwi.create(44, "&isr44UART3INT", hwi24Params0);
var hwi25Params = new Hwi.Params();
hwi25Params.instance.name = "isr45UART4INThn";
Program.global.isr45UART4INThn = Hwi.create(45, "&isr45UART4INT", hwi25Params);
var hwi26Params = new Hwi.Params();
hwi26Params.instance.name = "isr46UART5INThn";
Program.global.isr46UART5INThn = Hwi.create(46, "&isr46UART5INT", hwi26Params);
